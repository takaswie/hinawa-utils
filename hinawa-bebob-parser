#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (C) 2018 Takashi Sakamoto

from hinawa_utils.bebob.plug_parser import PlugParser

import sys
import json

argv = sys.argv
argc = len(argv)

if argc < 3:
    print('arguments:')
    print(' 1: the number of firewire character device (/dev/fw*)')
    print(' 2: dump mode (0: id-only, 1: whole as json)')
    sys.exit()

path = '/dev/fw{0}'.format(argv[1])
mode = int(argv[2])
parser = PlugParser(path)
parser.listen()
parser.parse()
parser.unlisten()

def dump_plug_info_to_stdio_as_json(parser):
    info = {
        'units': parser.unit_plugs,
        'subunits': parser.subunit_plugs,
        'function-blocks': parser.function_block_plugs,
        'stream-formats': parser.stream_formats,
    }
    print(json.dumps(info))


def dump_plug_info_to_stdio_as_ids_only(unit):
    for type, dir_plugs in parser.unit_plugs.items():
        for dir, plugs in dir_plugs.items():
            for num, plug in plugs.items():
                print(type, dir, num, plug['name'])

    for type, dir_plugs in parser.subunit_plugs.items():
        for id, id_plugs in dir_plugs.items():
            for dir, dir_plugs in id_plugs.items():
                for plug_id, attrs in dir_plugs.items():
                    print(type, id, dir, plug_id, attrs['name'])

    for type, type_plugs in parser.function_block_plugs.items():
        for id, id_plugs in type_plugs.items():
            for fb_type, fb_type_plugs in id_plugs.items():
                for fb_id, fb_id_plugs in fb_type_plugs.items():
                    for plug_id, attrs in fb_id_plugs['outputs'].items():
                        print(type, id, fb_type, fb_id, 'output', plug_id,
                              attrs['name'])
                    for plug_id, attrs in fb_id_plugs['inputs'].items():
                        print(type, id, fb_type, fb_id, 'input', plug_id,
                              attrs['name'])

    for type, dir_fmts in parser.stream_formats.items():
        for dir, fmts in dir_fmts.items():
            for i, entries in fmts.items():
                for j, entry in enumerate(entries):
                    print(type, dir, i, j, entry['type'])


if mode == 0:
    dump_plug_info_to_stdio_as_ids_only(parser)
else:
    dump_plug_info_to_stdio_as_json(parser)

sys.exit()
